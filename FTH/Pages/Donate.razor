@page "/Donate"
@using System.ComponentModel.DataAnnotations
@using FTH.Code


<div>
    <Card Margin="Margin.Is4.FromTop">
        <CardTitle>
            <Alert Color="Color.Info" Visible="true" class="align-center">
                <AlertMessage>Thank you!</AlertMessage>
                <AlertDescription>If you've not already read about the charities please do so</AlertDescription>
                <Container>
                    <Row>
                        <Column ColumnSize="ColumnSize.Is4.Is4.WithOffset">
                            <Button Type="ButtonType.Link" Color="Color.Primary" To="/Charities" Block="true">Our Charities</Button>
                        </Column>
                    </Row>
                </Container>
            </Alert>
        </CardTitle>
        <CardBody>
            <Container>
                <Row Gutter="(32,16)">



                    <Column ColumnSize="ColumnSize.Is4.Is4.WithOffset" class="align-center">


                        <Validations Mode="ValidationMode.Auto" Model="Model">
                            <Validation>
                                <FieldLabel>
                                    <NumericEdit @bind-Value="Model.Total" Decimals="2" placeholder="Amount" class="amount">
                                        <Feedback>
                                            <ValidationError />
                                        </Feedback>
                                    </NumericEdit>
                                </FieldLabel>
                            </Validation>
                        </Validations>

                        
                    </Column>
                </Row>

                <Divider></Divider>

            <Row Gutter="(32,16)">
                <Column ColumnSize="ColumnSize.Is8.Is2.WithOffset">
                    <TextEdit @bind-Text="Model.Name" placeholder="Fullname" />
                </Column>
            </Row>

            <Row Gutter="(32,16)">
                <Column ColumnSize="ColumnSize.Is8.Is2.WithOffset">
                    <Check @bind-Checked="Model.Anon" TValue="bool">
                        Anonymous donation
                    </Check>
                    <div>
                    @if (Model.Anon)
                    {
                        <FieldHelp>Your donation will still appear on the home page, but your name will not be displayed</FieldHelp>
                    }
                    </div>
                </Column>
            </Row>

            <Row Gutter="(32,16)">
                <Column ColumnSize="ColumnSize.Is8.Is2.WithOffset">

                    <Validations Mode="ValidationMode.Auto" Model="Model">
                        <Validation>
                            <TextEdit @bind-Text="Model.Email" placeholder="Email Address" Role="TextRole.Email">
                                <Feedback>
                                    <ValidationError />
                                    <ValidationSuccess>We'll send the password to the video to this address, so make sure it's correct!</ValidationSuccess>
                                </Feedback>
                            </TextEdit>
                        </Validation>
                    </Validations>
                </Column>
            </Row>

            <Row Gutter="(32,16)">
                <Column ColumnSize="ColumnSize.Is8.Is2.WithOffset">
                    <MemoEdit Rows="5" @bind-Text="Model.Comment" placeholder="Want to leave a comment with the donation?" />
                </Column>
            </Row>

            <Row Gutter="(32,16)">
                <Column ColumnSize="ColumnSize.Is12">
                <Check @bind-Checked="Model.AcceptTerms" TValue="bool">
                    By checking this you accept the <Link To="Terms" Target="Target.Blank">terms and conditions </Link> of our one off donations.
                </Check>
                </Column>
            </Row>

            <Row Gutter="(32,16)" class="@(Model.IsValid?"valid" : "not-valid")">
                <Column ColumnSize="ColumnSize.Is10.Is1.WithOffset">
                    <FieldHelp class="align-center">You can donate with Paypal even if you don't have an account.</FieldHelp>
                    <div id="paypal-button"></div>
                </Column> 
            </Row>
            </Container>
        </CardBody>
    </Card>

</div>


@code
{

    private static DonationEntry Model { get; set; } = new DonationEntry();
    private string SelectedTab { get; set; } = "donation";
    [Inject] private IJSRuntime JsRuntime { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
            await JsRuntime.BindPaypalButtons("#paypal-button");
    }


    private Task Save()
    {
        return Task.CompletedTask;
    }

    [JSInvokable]
    public static Task<DonationEntry> GetDonation()
    {
        return Task.FromResult(Model);
    }

    public class DonationEntry
    {
        [Required(ErrorMessage = "We can't accept donations of less than £1")]
        [Range(1, int.MaxValue, ErrorMessage = "We can't accept donations of less than £1")]
        public decimal? Total { get; set; }


        public string Comment { get; set; }
        public string Name { get; set; }
        [Required(ErrorMessage = "We need to know where to send the password")]
        [EmailAddress(ErrorMessage = "We don't recognise this address...")]
        public string Email { get; set; }

        public bool Anon { get; set; }
        public bool AcceptTerms { get; set; }

        public bool IsValid => AcceptTerms && (Total ?? 0) > 1 && Email.IsValidEmail();

    }

}
